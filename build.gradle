buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'maven-publish'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    id 'jacoco'
}

group = 'com.sgyj'
version = '1.0.9'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
bootJar.enabled = false // 실행가능한 아카이브로 main-class 가 있는 모듈인경우
jar.enabled = true // PLAIN 으로 생성 실행이 불가능한 일반 아카이브

jar { // 배포할 jar 이름
    archiveName("${project.name}-${version}.jar")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId project.name
            version version
            artifact("build/libs/$project.name-$version" + ".jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = repoUsername
                password = repoPassword
            }
            def releasesRepoUrl = nexusBaseUrl + "/tgather-release"
            def snapshotsRepoUrl = nexusBaseUrl + "/tgather-snapshot"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = true    // http 허용, https로 변경하면 필요없음.
        }
    }
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username = repoUsername    // System.getenv("NEXUS_ID") : 추후 하드코딩이 아닌 환경설정으로 처리
            password = repoPassword   // System.getenv("NEXUS_PASSWORD")
        }
        url "${nexusBaseUrl}/tgather-public/"
        allowInsecureProtocol = true    // http 허용, https로 변경하면 필요없음.
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.18.2'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부
def generated = "$buildDir/generated/querydsl"

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
//querydsl 추가 끝

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
